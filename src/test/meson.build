tests = {
    'arch_flags': {},
    'blk_include': {},
    'blk_nblock': {},
    'blk_non_zero': {},
    'blk_pool': {},
    'blk_pool_lock': {},
    'blk_pool_win': {
        'properties': [ 'windows_only' ],
    },
    'blk_recovery': {},
    'blk_rw': {},
    'blk_rw_mt': {},
    'bttdevice': {},
    'checksum': {},
    'compat_incompat_features': {},
    'ctl_cow': {},
    'ctl_prefault': {
        'properties': [ 'unix_only' ],
    },
    'daxio': {},
    'ex_libpmem': {},
    'ex_libpmem2': {},
    'ex_libpmemblk': {},
    'ex_libpmemlog': {},
    'ex_libpmemobj': {},
    'ex_libpmemset': {},
    'ex_linkedlist': {},
    'ex_pmreorder': {},
    'getopt': {},
    'libpmempool_api': {},
    'libpmempool_api_win': {
        'properties': [ 'windows_only' ],
    },
    'libpmempool_backup': {
        'test_deps': [ 'libpmempool_api' ],
    },
    'libpmempool_bttdev': {
        'test_deps': [ 'libpmempool_api' ],
    },
    'libpmempool_check_version': {},
    'libpmempool_feature': {},
    'libpmempool_include': {},
    'libpmempool_map_flog': {
        'test_deps': [ 'libpmempool_api' ],
    },
    'libpmempool_rm': {},
    'libpmempool_rm_remote': {
        'test_deps': [ 'libpmempool_rm' ],
    },
    'libpmempool_rm_win': {
        'properties': [ 'windows_only' ],
    },
    'libpmempool_sync': {},
    'libpmempool_sync_win': {
        'properties': [ 'windows_only' ],
    },
    'libpmempool_transform': {},
    'libpmempool_transform_win': {
        'properties': [ 'windows_only' ],
    },
    'log_basic': {},
    'log_include': {},
    'log_pool': {},
    'log_pool_lock': {},
    'log_pool_win': {
        'properties': [ 'windows_only' ],
    },
    'log_recovery': {},
    'log_walker': {},
    'magic': {},
    'mmap': {},
    'mmap_fixed': {},
    'obj_action': {},
    'obj_alloc': {},
    'obj_badblock': {},
    'obj_basic_integration': {},
    'obj_bucket': {},
    'obj_check': {},
    'obj_check_remote': {
        'properties': [ 'unix_only' ],
    },
    'obj_constructor': {},
    'obj_critnib': {},
    'obj_critnib_mt': {},
    'obj_ctl_alignment': {},
    'obj_ctl_alloc_class': {},
    'obj_ctl_alloc_class_config': {},
    'obj_ctl_arenas': {},
    'obj_ctl_config': {},
    'obj_ctl_debug': {},
    'obj_ctl_heap_size': {},
    'obj_ctl_stats': {},
    'obj_debug': {},
    'obj_defrag': {},
    'obj_defrag_advanced': {},
    'obj_direct': {},
    'obj_direct_volatile': {},
    'obj_extend': {},
    'obj_first_next': {},
    'obj_fragmentation': {},
    'obj_fragmentation2': {},
    'obj_heap': {},
    'obj_heap_interrupt': {},
    'obj_heap_state': {},
    'obj_include': {},
    'obj_lane': {},
    'obj_layout': {},
    'obj_list': {},
    'obj_list_insert': {
        'test_deps': [ 'obj_list' ],
    },
    'obj_list_macro': {},
    'obj_list_move': {
        'test_deps': [ 'obj_list' ],
    },
    'obj_list_recovery': {
        'test_deps': [ 'obj_list' ],
    },
    'obj_list_remove': {
        'test_deps': [ 'obj_list' ],
    },
    'obj_list_valgrind': {
        'test_deps': [ 'obj_list' ],
    },
    'obj_locks': {},
    'obj_many_size_allocs': {},
    'obj_mem': {},
    'obj_memblock': {},
    'obj_memcheck': {},
    'obj_memcheck_register': {},
    'obj_memops': {},
    'obj_oid_thread': {},
    'obj_out_of_memory': {},
    'obj_persist_count': {},
    'obj_pmalloc_basic': {},
    'obj_pmalloc_mt': {},
    'obj_pmalloc_oom_mt': {},
    'obj_pmalloc_rand_mt': {},
    'obj_pmemcheck': {
        'properties': [ 'unix_only' ],
    },
    'obj_pool': {},
    'obj_pool_lock': {},
    'obj_pool_lookup': {},
    'obj_pool_open_mt': {},
    'obj_pool_win': {
        'properties': [ 'windows_only' ],
    },
    'obj_realloc': {},
    'obj_recovery': {},
    'obj_recreate': {},
    'obj_reorder_basic': {
        'properties': [ 'unix_only' ],
    },
    'obj_root': {},
    'obj_rpmem_basic_integration': {
        'test_deps': [ 'obj_basic_integration' ],
    },
    'obj_rpmem_heap_interrupt': {
        'test_deps': [ 'obj_heap_interrupt' ],
    },
    'obj_rpmem_heap_state': {
        'test_deps': [ 'obj_heap_state' ],
    },
    'obj_sds': {},
    'obj_strdup': {},
    'obj_sync': {},
    'obj_toid': {},
    'obj_tx_add_range': {},
    'obj_tx_add_range_direct': {},
    'obj_tx_alloc': {},
    'obj_tx_callbacks': {},
    'obj_tx_flow': {},
    'obj_tx_free': {},
    'obj_tx_invalid': {},
    'obj_tx_lock': {},
    'obj_tx_locks': {},
    'obj_tx_locks_abort': {},
    'obj_tx_mt': {},
    'obj_tx_realloc': {},
    'obj_tx_strdup': {},
    'obj_tx_user_data': {},
    'obj_ulog_size': {},
    'obj_zones': {},
    'out_err': {},
    'out_err_mt': {},
    'out_err_mt_win': {
        'properties': [ 'windows_only' ],
    },
    'out_err_win': {
        'properties': [ 'windows_only' ],
    },
    'pmem_deep_persist': {},
    'pmem_eADR_functions': {},
    'pmem_has_auto_flush': {
        'properties': [ 'unix_only' ],
    },
    'pmem_has_auto_flush_win': {
        'properties': [ 'windows_only' ],
    },
    'pmem_include': {},
    'pmem_is_pmem': {},
    'pmem_is_pmem_posix': {},
    'pmem_is_pmem_windows': {
        'properties': [ 'windows_only' ],
    },
    'pmem_map_file': {},
    'pmem_map_file_trunc': {},
    'pmem_map_file_win': {
        'properties': [ 'windows_only' ],
    },
    'pmem_memcpy': {},
    'pmem_memmove': {},
    'pmem_memset': {},
    'pmem_movnt': {},
    'pmem_movnt_align': {},
    'pmem_unmap': {},
    'pmem_valgr_simple': {},
    'pmem2_api': {},
    'pmem2_badblock': {},
    'pmem2_badblock_mocks': {},
    'pmem2_compat': {},
    'pmem2_config': {},
    'pmem2_deep_flush': {},
    'pmem2_future': {},
    'pmem2_granularity': {},
    'pmem2_granularity_detection': {},
    'pmem2_include': {},
    'pmem2_integration': {},
    'pmem2_map': {},
    'pmem2_map_from_existing': {},
    'pmem2_map_prot': {},
    'pmem2_mem_ext': {},
    'pmem2_memcpy': {},
    'pmem2_memmove': {},
    'pmem2_memset': {},
    'pmem2_mover': {},
    'pmem2_movnt': {},
    'pmem2_movnt_align': {},
    'pmem2_perror': {},
    'pmem2_persist': {},
    'pmem2_persist_valgrind': {},
    'pmem2_source': {},
    'pmem2_source_alignment': {},
    'pmem2_source_numa': {},
    'pmem2_source_size': {},
    'pmem2_usc': {},
    'pmem2_vm_reservation': {},
    'pmemobjcli': {},
    'pmempool_check': {},
    'pmempool_create': {},
    'pmempool_dump': {},
    'pmempool_feature': {},
    'pmempool_feature_remote': {},
    'pmempool_help': {},
    'pmempool_info': {},
    'pmempool_info_remote': {},
    'pmempool_rm': {},
    'pmempool_rm_remote': {},
    'pmempool_sync': {},
    'pmempool_sync_remote': {},
    'pmempool_transform': {},
    'pmempool_transform_remote': {},
    'pmemset_badblock': {},
    'pmemset_config': {},
    'pmemset_deep_flush': {},
    'pmemset_event': {},
    'pmemset_file': {},
    'pmemset_include': {},
    'pmemset_map_config': {},
    'pmemset_memcpy': {},
    'pmemset_memmove': {},
    'pmemset_memset': {},
    'pmemset_new': {},
    'pmemset_part': {},
    'pmemset_perror': {},
    'pmemset_persist': {},
    'pmemset_sds': {},
    'pmemset_source': {},
    'pmemspoil': {},
    'pmreorder_flushes': {},
    'pmreorder_simple': {},
    'pmreorder_stack': {},
    #'remote_basic': {},
    #'remote_obj_basic': {},
    #'rpmem_addr': {},
    #'rpmem_addr_ext': {},
    #'rpmem_basic': {},
    #'rpmem_fip': {},
    #'rpmem_obc': {},
    #'rpmem_obc_int': {},
    #'rpmem_proto': {},
    #'rpmemd_config': {},
    #'rpmemd_db': {},
    #'rpmemd_dbg': {},
    #'rpmemd_log': {},
    #'rpmemd_obc': {},
    #'rpmemd_util': {},
    'scope': {},
    'set_funcs': {},
    'signal_handle': {
        'properties': [ 'windows_only' ],
    },
    'traces': {},
    'traces_custom_function': {},
    'traces_pmem': {},
    'unicode_api': {},
    'unicode_match_script': {
        'properties': [ 'unix_only' ],
    },
    'util_badblock': {},
    'util_cpuid': {},
    'util_ctl': {},
    'util_extent': {},
    'util_file_create': {},
    'util_file_open': {},
    'util_is_absolute': {},
    'util_is_poolset': {},
    'util_is_zeroed': {},
    'util_map_proc': {},
    'util_parse_size': {},
    'util_pool_hdr': {},
    'util_poolset': {},
    'util_poolset_foreach': {},
    'util_poolset_parse': {},
    'util_poolset_size': {},
    'util_ravl': {},
    'util_sds': {},
    'util_uuid_generate': {},
    'util_vec': {},
    'util_vecq': {},
    'win_common': {
        'properties': [ 'windows_only' ],
    },
    'win_lists': {
        'properties': [ 'windows_only' ],
    },
    'win_mmap_dtor': {
        'properties': [ 'windows_only' ],
    },
    'win_poolset_unmap': {
        'properties': [ 'windows_only' ],
    },
    'win_signal': {
        'properties': [ 'windows_only' ],
    },
}

unittest_sources = files(
    '../../testsuite/unittest/ut_alloc.c',
    '../../testsuite/unittest/ut_backtrace.c',
    '../../testsuite/unittest/ut_fh.c',
    '../../testsuite/unittest/ut_file.c',
    '../../testsuite/unittest/ut_pthread.c',
    '../../testsuite/unittest/ut_signal.c',
    '../../testsuite/unittest/ut.c',
)

c_args = []
link_args = []
if host_machine.system() == 'windows'
    c_args = ['-TC', '-DNTDDI_VERSION=NTDDI_WIN10_RS1', '-D_DEBUG', '-D_CONSOLE']
    if get_option('buildtype') == 'debug'
        c_args += '-MDd'
    elif get_option('buildtype') == 'release'
        c_args += '-MD'
    endif
    link_args += 'dbghelp.lib'
else
    
endif

unittest_lib = static_library(
    'unittest',
    unittest_sources,
    link_args: link_args,
    c_args: c_args,
    dependencies: [
        libpmem_dep,
        pmemcore_dep,
    ],
    include_directories: [
        include_directories('../../testsuite/unittest'),
        root_include,
        core_include,
        windows_include,
    ],
    install: false,
)

unittest_dep = declare_dependency(
    link_with: unittest_lib,
    link_args: link_args,
    include_directories: [
        include_directories('../../testsuite/unittest'),
        core_include,
        common_include,
        root_include,
        windows_include,
    ]
)

unittest_pmem2_sources = files(
    '../../testsuite/unittest/ut_pmem2_config.c',
    '../../testsuite/unittest/ut_pmem2_map.c',
    '../../testsuite/unittest/ut_pmem2_setup_integration.c',
    '../../testsuite/unittest/ut_pmem2_setup.c',
    '../../testsuite/unittest/ut_pmem2_source.c',
    '../../testsuite/unittest/ut_pmem2_utils.c',
    '../libpmem2/config.c',
    '../libpmem2/errormsg.c',
    '../libpmem2/map.c',
    '../libpmem2/memops_generic.c',
    '../libpmem2/mover.c',
    '../libpmem2/persist.c',
    '../libpmem2/pmem2_utils.c',
    '../libpmem2/source.c',
    '../libpmem2/vm_reservation.c',
)

if host_machine.system() == 'windows'
    unittest_pmem2_sources += [
        '../libpmem2/map_windows.c',
        '../libpmem2/persist_windows.c',
        '../libpmem2/source_windows.c',
        '../libpmem2/vm_reservation_windows.c',
        '../libpmem2/auto_flush_windows.c',
        '../libpmem2/deep_flush_windows.c',
    ]
else
    unittest_pmem2_sources += [
        '../libpmem2/map_posix.c',
        '../libpmem2/source_posix.c',
        '../libpmem2/persist_posix.c',
        '../libpmem2/vm_reservation_posix.c',
    ]

    if host_machine.system() == 'linux'
        unittest_pmem2_sources += [
            '../libpmem2/auto_flush_linux.c',
            '../libpmem2/deep_flush_linux.c',
            '../libpmem2/pmem2_utils_linux.c',
            '../libpmem2/extent_linux.c',
        ]
        if libndctl_dep.found()
            unittest_pmem2_sources += '../libpmem2/pmem2_utils_ndctl.c'
        else
            unittest_pmem2_sources += '../libpmem2/pmem2_utils_none.c'
        endif
    else
        unittest_pmem2_sources += [
            '../libpmem2/pmem2_utils_other.c',
            '../libpmem2/auto_flush_none.c',
            '../libpmem2/deep_flush_none.c',
            '../libpmem2/extent_none.c',
        ]
    endif
endif

if libndctl_dep.found()
    unittest_pmem2_sources += [
        '../libpmem2/region_namespace_ndctl.c',
        '../libpmem2/numa_ndctl.c',
    ]
else
    unittest_pmem2_sources += [
        '../libpmem2/region_namespace_none.c',
        '../libpmem2/numa_none.c',
    ]
endif

unittest_pmem2_lib = static_library(
    'unittest_pmem2',
    unittest_pmem2_sources,
    c_args: [
        '-DPMEM2_USE_MINIASYNC',
    ],
    dependencies: [
        libndctl_dep,
        libdaxctl_dep,
        pmem2arch_dep,
        pmemcore_dep,
        pmemcommon_dep,
        unittest_dep,
        miniasync_dep,
    ],
    include_directories: [
        include_directories('../../testsuite/unittest'),
        include_directories('../libpmem2'),
        root_include,
    ],
    install: false,
)

unittest_pmem2_dep = declare_dependency(
    link_with: unittest_pmem2_lib,
    include_directories: [
        include_directories('../../testsuite/unittest'),
    ]
)

unittest_pmemset_sources = files(
    '../../testsuite/unittest/ut_pmemset_utils.c',
)

unittest_pmemset_dep = declare_dependency(
    sources: unittest_pmemset_sources,
    include_directories: [
        include_directories('../../testsuite/unittest'),
    ]
)

filtered_tests = {}

# filter tests based on option dependencies and platform
foreach t, attrs : tests
    option_deps = attrs.get('option_deps', [])

    deps_fulfilled = true
    foreach dep : option_deps
        if not get_option(dep)
            deps_fulfilled = false
            break
        endif
    endforeach

    if not deps_fulfilled
        continue # filter test cases with dependencies on disabled options
    endif

    properties = attrs.get('properties', [])
    if properties.contains('windows_only') and host_machine.system() != 'windows'
        continue # filter 'windows_only' test cases on platforms different than windows
    endif

    if properties.contains('unix_only') and host_machine.system() == 'windows'
        continue # filter 'unix_only' test cases on windows
    endif

    filtered_tests += {t: attrs}
endforeach

# script for copying files from the source dir to the meson build dir
copy = find_program('../../utils/copy-file.py')

# script for getting the mocked functions out of C files
get_mocks = find_program('../../utils/get-mocks.py')

# list of copy targets responsible for copying files of each test
copy_targets = []
list_files = find_program('../../utils/list-files.py')
test_files_regex = '(.*TEST[0-9]+([.]PS1)?$)|(.*TESTS.py$)|(.*[.]match$)|(common.sh)|(asset_list.txt)|(alloc_class_config)|(pool.set)'

executable(
    'arch_flags_test',
    'arch_flags/arch_flags.c',
    c_args: [],
    include_directories: [],
    dependencies: [ libpmem_dep,
        pmemcore_dep,
        pmemcommon_dep,
        unittest_dep],
    install_dir: 'arch_flags_test',
)

foreach t, attrs : filtered_tests
    test_deps = attrs.get('test_deps', [])

    test_deps_fulfilled = true
    foreach test : test_deps
        if not filtered_tests.has_key(test)
            test_deps_fulfilled = false
        endif
    endforeach

    if not test_deps_fulfilled
        continue # skip test cases with dependencies on test executables that were filtered out
    endif

    # Get list of files needed by the test
    list_files_result = run_command(
        list_files,
        '--regex',
        test_files_regex,
        '--dir', 
        './'+t,
        check: true,
    )
    test_files = list_files_result.stdout().strip().split('\n')

    subdir(t)

    copy_targets += copy_target
endforeach
